<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>Frame</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2024-05-26T23:24:07+08:00</updated> <author> <name>Mark Truluck</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2024 Mark Truluck </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>What is Frame?</title><link href="/posts/what_is_frame/" rel="alternate" type="text/html" title="What is Frame?" /><published>2021-03-21T16:00:00+08:00</published> <updated>2021-04-28T21:42:41+08:00</updated> <id>/posts/what_is_frame/</id> <content src="/posts/what_is_frame/" /> <author> <name>Mark Truluck</name> </author> <category term="language-basics" /> <summary> Frame is a simple yet powerful system specification language for defining the dynamic behavior of systems. With Frame notation it is easy to quickly design state machines that comply with core UML statechart concepts through a decidedly advantageous new approach. A Markdown Language For System Designers UML and other modeling specifications promote a visual-first paradigm. However this approa... </summary> </entry> <entry><title>Getting Started With Frame</title><link href="/posts/getting_started_with_frame/" rel="alternate" type="text/html" title="Getting Started With Frame" /><published>2021-03-15T16:00:00+08:00</published> <updated>2021-04-10T08:33:25+08:00</updated> <id>/posts/getting_started_with_frame/</id> <content src="/posts/getting_started_with_frame/" /> <author> <name>Mark Truluck</name> </author> <category term="language-basics" /> <summary> Quick Start Framing software is a dramatically different way to think about designing software systems. However! After you master thinking contextually, I believe you won’t ever want to work any other way. To get going, a good place to start is with my Getting Started With Frame video. It gives a good overview of all the basics of how Frame restructures code to make software system design mor... </summary> </entry> <entry><title>The Frame System Interface</title><link href="/posts/the_frame_system_interface/" rel="alternate" type="text/html" title="The Frame System Interface" /><published>2021-03-14T16:00:00+08:00</published> <updated>2021-03-14T16:00:00+08:00</updated> <id>/posts/the_frame_system_interface/</id> <content src="/posts/the_frame_system_interface/" /> <author> <name>Mark Truluck</name> </author> <category term="language-basics" /> <summary> As discussed in previous articles, Frame specs are divided into up to four “blocks”, the first of which is the interface block. The interface block implementation in the target language consists of the public methods for the object which are responsible for creating and initializing a FrameEvent object, sending it to the internal state machine and then returning a response, if any, to the call... </summary> </entry> <entry><title>System Behavior Notation in Frame</title><link href="/posts/frame_behaviors/" rel="alternate" type="text/html" title="System Behavior Notation in Frame" /><published>2021-03-13T16:00:00+08:00</published> <updated>2021-03-13T16:00:00+08:00</updated> <id>/posts/frame_behaviors/</id> <content src="/posts/frame_behaviors/" /> <author> <name>Mark Truluck</name> </author> <category term="language-basics" /> <summary> At a high level, systems have two kinds of behavior - actions and changes of state. In Frame, changes of state come in two flavors - transitions and state changes. Statecharts, the software modeling technique Frame descends from, distinguishes between “actions” which take very little time to execute and “activities” which are relatively long running asynchronous or background behavior, typical... </summary> </entry> <entry><title>Frame Event Handler Termination</title><link href="/posts/return_vs_continue/" rel="alternate" type="text/html" title="Frame Event Handler Termination" /><published>2021-03-12T16:00:00+08:00</published> <updated>2021-04-12T21:51:13+08:00</updated> <id>/posts/return_vs_continue/</id> <content src="/posts/return_vs_continue/" /> <author> <name>Mark Truluck</name> </author> <category term="language-basics" /> <summary> Frame event handlers are terminated with two operators: Operator Meaning ^ return :&amp;gt; continue Return is, by far, the most common of the two. Lining up the Frame notation with the C# code it generates we can see how they align: Frame Notation C# code $EventTerminators ... </summary> </entry> </feed>
